// src/services/chatbotService.js
import { supabase } from '../lib/supabase'

let genAI = null

export class ChatbotService {
    // Get portfolio context t·ª´ Supabase
    static async getPortfolioContext() {
        try {
            const [
                { data: personalInfo },
                { data: skills },
                { data: projects },
                { data: certificates },
                { data: socialLinks },
                { data: knowledgeBase }
            ] = await Promise.all([
                supabase.from('personal_info').select('*').limit(1),
                supabase.from('skills').select('*'),
                supabase.from('projects').select('*'),
                supabase.from('certificates').select('*'),
                supabase.from('social_links').select('*'),
                supabase.from('chatbot_knowledge').select('*').eq('is_active', true)
            ])

            return {
                personalInfo: personalInfo?.[0],
                skills,
                projects,
                certificates,
                socialLinks,
                knowledgeBase
            }
        } catch (error) {
            console.error('Error fetching portfolio context:', error)
            return {
                personalInfo: { name: 'Nguy·ªÖn V≈© ƒêƒÉng Kh√°nh', title: 'Full Stack Developer' },
                skills: [],
                projects: [],
                certificates: [],
                socialLinks: [],
                knowledgeBase: []
            }
        }
    }

    // Search relevant knowledge from database
    static searchKnowledge(query, knowledgeBase) {
        if (!knowledgeBase || knowledgeBase.length === 0) return []

        const lowercaseQuery = query.toLowerCase()

        return knowledgeBase.filter(item => {
            const questionMatch = item.question.toLowerCase().includes(lowercaseQuery)
            const answerMatch = item.answer.toLowerCase().includes(lowercaseQuery)
            const keywordMatch = item.keywords?.some(keyword =>
                lowercaseQuery.includes(keyword.toLowerCase()) ||
                keyword.toLowerCase().includes(lowercaseQuery)
            )

            return questionMatch || answerMatch || keywordMatch
        })
    }

    // RULE-BASED RESPONSES (FALLBACK)
    static generateRuleBasedResponse(userMessage, context) {
        const { personalInfo, skills, projects, certificates } = context
        const lowercaseMessage = userMessage.toLowerCase()

        // Check knowledge base first
        const relevantKnowledge = this.searchKnowledge(userMessage, context.knowledgeBase || [])
        if (relevantKnowledge.length > 0) {
            return relevantKnowledge[0].answer + ' üòä'
        }

        // Personal info questions
        if (lowercaseMessage.includes('t√™n') || lowercaseMessage.includes('name') || lowercaseMessage.includes('b·∫°n l√† ai')) {
            return `Xin ch√†o! T√¥i l√† ${personalInfo?.display_name || 'Nguy·ªÖn V≈© ƒêƒÉng Kh√°nh'}, m·ªôt ${personalInfo?.title || 'Full Stack Developer'}. R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! üëã\n\nB·∫°n mu·ªën bi·∫øt g√¨ v·ªÅ k·ªπ nƒÉng, d·ª± √°n hay kinh nghi·ªám c·ªßa t√¥i?`
        }

        // Skills questions
        if (lowercaseMessage.includes('k·ªπ nƒÉng') || lowercaseMessage.includes('skill') || lowercaseMessage.includes('c√¥ng ngh·ªá')) {
            const featuredSkills = skills?.filter(s => s.is_featured)?.map(s => s.name) || ['ReactJS', 'Spring Boot', 'JavaScript', 'TailwindCSS']
            return `T√¥i c√≥ kinh nghi·ªám v·ªõi c√°c c√¥ng ngh·ªá ch√≠nh sau: üõ†Ô∏è\n\n${featuredSkills.map(skill => `‚Ä¢ ${skill}`).join('\n')}\n\nB·∫°n mu·ªën bi·∫øt chi ti·∫øt v·ªÅ c√¥ng ngh·ªá n√†o c·ª• th·ªÉ?`
        }

        // Projects questions
        if (lowercaseMessage.includes('d·ª± √°n') || lowercaseMessage.includes('project') || lowercaseMessage.includes('l√†m g√¨')) {
            const featuredProjects = projects?.filter(p => p.is_featured)?.map(p => p.title) || ['Portfolio Website', 'Event Management System', 'E-commerce Platform']
            return `T√¥i ƒë√£ th·ª±c hi·ªán nhi·ªÅu d·ª± √°n th√∫ v·ªã: üöÄ\n\n${featuredProjects.map(project => `‚Ä¢ ${project}`).join('\n')}\n\nB·∫°n mu·ªën xem demo hay t√¨m hi·ªÉu chi ti·∫øt v·ªÅ d·ª± √°n n√†o?`
        }

        // Contact questions
        if (lowercaseMessage.includes('li√™n h·ªá') || lowercaseMessage.includes('contact') || lowercaseMessage.includes('email')) {
            return `B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi t√¥i qua: üìß\n\n‚Ä¢ Email: ${personalInfo?.email || 'your-email@example.com'}\n‚Ä¢ GitHub, LinkedIn, Facebook\n‚Ä¢ Ho·∫∑c form contact tr√™n website n√†y\n\nT√¥i lu√¥n s·∫µn s√†ng tr·∫£ l·ªùi v√† th·∫£o lu·∫≠n v·ªÅ c∆° h·ªôi h·ª£p t√°c!`
        }

        // Certificates questions
        if (lowercaseMessage.includes('ch·ª©ng ch·ªâ') || lowercaseMessage.includes('certificate') || lowercaseMessage.includes('h·ªçc')) {
            const certTitles = certificates?.map(c => c.title) || ['Web Development', 'Software Development Lifecycle', 'UX Design']
            return `T√¥i c√≥ c√°c ch·ª©ng ch·ªâ t·ª´ nh·ªØng kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng: üèÜ\n\n${certTitles.map(cert => `‚Ä¢ ${cert}`).join('\n')}\n\nT·∫•t c·∫£ ƒë·ªÅu gi√∫p t√¥i n√¢ng cao k·ªπ nƒÉng chuy√™n m√¥n!`
        }

        // Greeting responses
        if (lowercaseMessage.includes('xin ch√†o') || lowercaseMessage.includes('hello') || lowercaseMessage.includes('hi') || lowercaseMessage.includes('ch√†o') || lowercaseMessage.includes('greet') || lowercaseMessage.includes('greet me')) {
            return `Xin ch√†o b·∫°n! üëã R·∫•t vui ƒë∆∞·ª£c g·∫∑p!\n\nT√¥i l√† AI assistant c·ªßa ${personalInfo?.display_name || 'Khanh'}. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ:\n\n‚Ä¢ K·ªπ nƒÉng v√† c√¥ng ngh·ªá\n‚Ä¢ D·ª± √°n ƒë√£ th·ª±c hi·ªán\n‚Ä¢ Kinh nghi·ªám l√†m vi·ªác\n‚Ä¢ C√°ch li√™n h·ªá\n\nB·∫°n mu·ªën bi·∫øt g√¨ ƒë·∫ßu ti√™n? üòä`
        }

        // Thank you responses
        if (lowercaseMessage.includes('c·∫£m ∆°n') || lowercaseMessage.includes('thank')) {
            return `Kh√¥ng c√≥ g√¨ ƒë√¢u! üòä R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n.\n\nN·∫øu c√≥ th√™m c√¢u h·ªèi g√¨ kh√°c v·ªÅ portfolio, ƒë·ª´ng ng·∫°i h·ªèi nh√©! T√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª°. ‚ú®`
        }

        // Default helpful response
        return `C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! üòä T√¥i l√† AI assistant c·ªßa ${personalInfo?.display_name || 'Nguy·ªÖn V≈© ƒêƒÉng Kh√°nh'}. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ k·ªπ nƒÉng, d·ª± √°n, kinh nghi·ªám v√† nhi·ªÅu th√¥ng tin kh√°c c·ªßa c·∫≠u ch·ªß t√¥i. B·∫°n mu·ªën bi·∫øt g√¨?`
    }

    // GEMINI AI RESPONSE (if available)
    static async generateGeminiResponse(userMessage, context) {
        if (!genAI) {
            throw new Error('Gemini not initialized')
        }

        const { personalInfo, skills, projects, certificates, knowledgeBase } = context
        const relevantKnowledge = this.searchKnowledge(userMessage, knowledgeBase)

        const systemPrompt = `B·∫°n l√† AI assistant th√¢n thi·ªán cho portfolio c·ªßa ${personalInfo?.name || 'Nguy·ªÖn V≈© ƒêƒÉng Kh√°nh'}. 

TH√îNG TIN C√Å NH√ÇN:
- T√™n: ${personalInfo?.display_name || 'Nguy·ªÖn V≈© ƒêƒÉng Kh√°nh'}
- Ch·ª©c danh: ${personalInfo?.title || 'Full Stack Developer'}
- Bio: ${personalInfo?.bio || 'Passionate developer v·ªõi kinh nghi·ªám web development'}
- Location: ${personalInfo?.location || 'Vietnam'}

K·ª∏ NƒÇNG CH√çNH:
${skills?.slice(0, 8).map(skill => `- ${skill.name} (${skill.category})`).join('\n') || '- ReactJS, Spring Boot, JavaScript, TailwindCSS'}

D·ª∞ √ÅN N·ªîI B·∫¨T:
${projects?.slice(0, 3).map(project => `- ${project.title}: ${project.description}`).join('\n') || '- Portfolio Website, Event Management System, E-commerce Platform'}

CH·ª®NG CH·ªà:
${certificates?.slice(0, 3).map(cert => `- ${cert.title} (${cert.issuer})`).join('\n') || '- Web Development, Software Lifecycle, UX Design'}

KNOWLEDGE BASE:
${relevantKnowledge.slice(0, 2).map(item => `Q: ${item.question}\nA: ${item.answer}`).join('\n\n')}

H∆Ø·ªöNG D·∫™N:
1. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát th√¢n thi·ªán, chuy√™n nghi·ªáp
2. S·ª≠ d·ª•ng emoji ph√π h·ª£p 
3. Tr·∫£ l·ªùi ng·∫Øn g·ªçn (t·ªëi ƒëa 150 t·ª´)
4. N·∫øu kh√¥ng bi·∫øt, g·ª£i √Ω c√°ch li√™n h·ªá th√¥ng qua email ho·∫∑c form contact
5. Lu√¥n nhi·ªát t√¨nh v√† h·ªó tr·ª£ t√≠ch c·ª±c

C√¢u h·ªèi: ${userMessage}`

        const model = genAI.getGenerativeModel({ model: "gemini-pro" })
        const result = await model.generateContent(systemPrompt)
        const response = await result.response
        return response.text()
    }

    // MAIN GENERATE RESPONSE METHOD
    static async generateResponse(userMessage, context) {
        try {
            // Try Gemini AI first if available
            if (genAI && import.meta.env.VITE_GEMINI_API_KEY) {
                const response = await this.generateGeminiResponse(userMessage, context)
                return response
            } else {
                return this.generateRuleBasedResponse(userMessage, context)
            }
        } catch (error) {
            console.error('‚ùå AI Error, falling back to rules:', error)
            // Always fallback to rule-based if AI fails
            return this.generateRuleBasedResponse(userMessage, context)
        }
    }

    // Save chat history to Supabase
    static async saveChatHistory(userMessage, botResponse, sessionId) {
        try {
            await supabase.from('chat_history').insert([{
                session_id: sessionId,
                user_message: userMessage,
                bot_response: botResponse,
                response_time_ms: Date.now()
            }])
        } catch (error) {
            console.error('Error saving chat history:', error)
        }
    }

    // Test API connectivity
    static async testAPI() {
        try {
            if (genAI) {
                const model = genAI.getGenerativeModel({ model: "gemini-pro" })
                await model.generateContent("Test")
                return { success: true, service: 'Gemini AI' }
            } else {
                return { success: true, service: 'Rule-based (Fallback)' }
            }
        } catch (error) {
            return { success: false, error: error.message, service: 'Rule-based (Fallback)' }
        }
    }
}

export default ChatbotService